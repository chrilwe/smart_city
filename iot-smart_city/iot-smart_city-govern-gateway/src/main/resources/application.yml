server:
  port: 8888
  servlet:
    context-path: /iot
spring:
  application:
    name: iot-smart-city-govern-gateway
  redis:
    cluster:
      nodes:
      - 127.0.0.1:6379
    jedis:
      pool:
        max-active: 300    ## 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1    ## 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 100    ## 连接池中的最大空闲连接
        min-idle: 20     #### 连接池中的最小空闲连接
    timeout: 60000
      
          

zuul:
  ignored-services: "*" #将所有通过真实微服务的请求全部禁用     真实访问 http://网关应用url/真实注册服务Application名称/..
  routes: 
    service-manager: 
      path: /manage/**
      serviceId: iot-smart-city-service-manage #微服务名称，网关会从eureka中获取该服务名称下的服务实例的地址
      # 例子：将请求转发到http://localhost:31200/course
      #url: http://www.baidu.com #也可指定url，此url也可以是外网地址\
      strip-prefix: false #true：代理转发时去掉前缀，false:代理转发时不去掉前缀
      sensitiveHeaders:  #默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名单，如果设置了具体的头信息则不会传到下游服务
      #   ignoredHeaders: 默认为空表示不过虑任何头
   
eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: http://localhost:8889/eureka/
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port} #指定实例id
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间     

info: 
  app.name: iot-smart-city-govern-gateway
  company.name: chrilwe.com
  build.artifactId: $project.artifactId$
  build.version: $project.version$
  
sc: 
  cookieName: sc-cookie